from sqlalchemy.orm import Session
from app.models.user import User as UserModel # UserModel is an alias for models.user.User
from app.schemas.user import UserCreate as UserCreateSchema # UserCreateSchema for schemas.user.UserCreate
from app.core.security import hash_password
from uuid import UUID # Import UUID for type hinting and conversion

def get_user_by_email(db: Session, email: str) -> UserModel | None:
    return db.query(UserModel).filter(UserModel.email == email).first()

def get_user(db: Session, user_id: UUID) -> UserModel | None: # user_id is expected to be UUID
    # The model uses PG_UUID(as_uuid=True), so SQLAlchemy handles conversion if a string UUID is passed to filter.
    # However, ensuring the input type is UUID or converting it here is good practice for consistency.
    if isinstance(user_id, str):
        try:
            user_id = UUID(user_id)
        except ValueError:
            # If string is not a valid UUID, it won't match anything anyway, or could raise error depending on DB driver
            return None 
    return db.query(UserModel).filter(UserModel.id == user_id).first()


def create_user(db: Session, user: UserCreateSchema) -> UserModel:
    hashed_pass = hash_password(user.password)
    db_user = UserModel(
        email=user.email,
        full_name=user.full_name,
        hashed_password=hashed_pass
        # id will be auto-generated by default by the database (e.g. uuid_generate_v4())
        # is_active defaults to True in the model
    )
    db.add(db_user)
    db.commit()
    db.refresh(db_user)
    return db_user

# Add other CRUD functions as needed, e.g., update_user, delete_user
# For now, get_user_by_email, get_user (by ID), and create_user are sufficient for the current plan.
